using Pkg
Pkg.add("JuMP")
Pkg.add("GLPK")
Pkg.add("DataFrames")

using JuMP
using GLPK
using DataFrames

using JuMP, GLPK, DataFrames

# Constants
C1 = 1.0
C2 = 1.2
C3 = 0.5
C4 = 1.5
C5 = 0.8
R1 = 1.1
R2 = 1.3
D_max = 1000
P_min = 200
Y1_max = 50
Y2_max = 100

# Linear programming model
model = Model(GLPK.Optimizer)

# Variables
@variable(model, x1 >= 0)
@variable(model, x2 >= 0)
@variable(model, y >= 0)

# Objective function
@objective(model, Min, C1 * x1 + C2 * x2 + C3 * (x1 + x2) + C4 * y + C5 * (R1 * x1 + R2 * x2))

# Constraints
@constraint(model, x1 + x2 <= D_max)
@constraint(model, y >= P_min)
@constraint(model, x1 * Y1_max >= y)
@constraint(model, x2 * Y2_max >= y)

# Solve the model
optimize!(model)

# Get the optimal solution
optimal_x1 = value(x1)
optimal_x2 = value(x2)
optimal_y = value(y)
optimal_cost = objective_value(model)

# Print the results
println("Optimal distance for UAVs: ", optimal_x1)
println("Optimal distance for UGVs: ", optimal_x2)
println("Optimal payload: ", optimal_y)
println("Minimum total cost: ", optimal_cost)
